import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;

public class WebsiteMonitor extends JFrame {
    private JPanel mainPanel;
    private JTextArea textEditor;  // Text editor at the top
    private ArrayList<JPanel> framePanels;  // Store the frame panels for easy removal
    private ArrayList<Timer> timers;

    public WebsiteMonitor() {
        setTitle("Website Monitor");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Text editor at the top of the window
        textEditor = new JTextArea(5, 50);
        textEditor.setLineWrap(true);
        textEditor.setWrapStyleWord(true);
        JScrollPane textEditorScrollPane = new JScrollPane(textEditor);
        textEditorScrollPane.setBorder(BorderFactory.createTitledBorder("Text Editor (Paste URLs or Notes Here)"));
        add(textEditorScrollPane, BorderLayout.NORTH);  // Place at the top

        // Main panel for displaying frames
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1, 1));
        add(mainPanel, BorderLayout.CENTER);

        framePanels = new ArrayList<>();
        timers = new ArrayList<>();

        // Add button to allow adding new frames below the text editor
        JButton addButton = new JButton("Add Frame");
        addButton.addActionListener(e -> addWebFrame());
        add(addButton, BorderLayout.SOUTH);

        setVisible(true);
    }

    private void addWebFrame() {
        // Prompt for the URL and validate
        String url = JOptionPane.showInputDialog(this, "Enter URL to monitor:");
        if (url == null || url.isEmpty() || (!url.startsWith("http://") && !url.startsWith("https://"))) {
            JOptionPane.showMessageDialog(this, "Invalid URL. Frame not added.");
            com.example.monitoring.WebsiteChecker checker = new com.example.monitoring.WebsiteChecker(url);
            return;
        }

        // Prompt for the refresh interval (in seconds)
        String intervalStr = JOptionPane.showInputDialog(this, "Enter refresh interval (in seconds):");
        int refreshInterval;
        try {
            refreshInterval = Integer.parseInt(intervalStr) * 1000; // Convert to milliseconds
            if (refreshInterval <= 0) throw new NumberFormatException();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid interval. Frame not added.");
            return;
        }

        // Adjust the layout grid based on the number of frames
        int rows = (int) Math.ceil(Math.sqrt(framePanels.size() + 1));
        mainPanel.setLayout(new GridLayout(rows, rows));

        // Create a new panel to contain the JEditorPane and Close button
        JPanel framePanel = new JPanel(new BorderLayout());

        // Create a new JEditorPane for HTML content
        JEditorPane editorPane = new JEditorPane();
        editorPane.setEditable(false);
        try {
            editorPane.setPage(url);
        } catch (IOException ex) {
            editorPane.setText("Could not load webpage at " + url);
        }
        JScrollPane scrollPane = new JScrollPane(editorPane);
        framePanel.add(scrollPane, BorderLayout.CENTER);

        // Create the Close button and add it to the frame panel
        JButton closeButton = new JButton("Close");
        framePanel.add(closeButton, BorderLayout.SOUTH);

        // Set up a timer to refresh this frame at the specified interval
        Timer timer = new Timer(refreshInterval, e -> {
            try {
                editorPane.setPage(url);
            } catch (IOException ex) {
                editorPane.setText("Could not reload webpage at " + url);
            }
        });
        timer.start();

        // Action for the Close button
        closeButton.addActionListener(e -> {
            // Stop the timer for this frame
            timer.stop();

            // Remove this frame from the main panel and the list of frames
            mainPanel.remove(framePanel);
            framePanels.remove(framePanel);
            timers.remove(timer);

            // Recalculate the grid layout and refresh the main panel
            int newRows = (int) Math.ceil(Math.sqrt(framePanels.size()));
            mainPanel.setLayout(new GridLayout(newRows, newRows));
            mainPanel.revalidate();
            mainPanel.repaint();
        });

        // Add the frame panel to the main panel and lists
        framePanels.add(framePanel);
        timers.add(timer);
        mainPanel.add(framePanel);

        // Refresh the main panel to display the new frame
        mainPanel.revalidate();
        mainPanel.repaint();
    }

    public static void main(String[] args) {
        String disclaimer = "DISCLAIMER:\n\n"
                + "This software is provided \"as-is,\" without any express or implied warranties. "
                + "In no event shall the developers be held liable for any damages arising from the use of this software.\n\n"
                + "No support or maintenance is provided, and use of this program is entirely at your own risk.\n\n"
                + "By proceeding, you agree to these terms.\n\n"
                + "Click OK to continue.";

        JOptionPane.showMessageDialog(null, disclaimer, "Disclaimer", JOptionPane.WARNING_MESSAGE);

        // Display a message dialog with instructions before launching the main window
        String instructions = "Welcome to the Website Monitor!\n\n"
                + "1. Paste URLs into the text editor to keep track of websites.\n"
                + "2. Click 'Add Frame' to create new monitoring frames.\n"
                + "3. Set a refresh interval for each frame to automatically reload the pages.\n"
                + "4. You can remove any frame by clicking the 'Close' button within it.\n\n"
                + "Click OK to proceed and start monitoring!";

        JOptionPane.showMessageDialog(null, instructions, "Instructions", JOptionPane.INFORMATION_MESSAGE);

        // After the instructions dialog is closed, start the main application window
        SwingUtilities.invokeLater(WebsiteMonitor::new);
    }
}
